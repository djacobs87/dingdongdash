# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-06-03 14:14
from __future__ import unicode_literals

from django.db import migrations
from django.contrib.auth.models import Group, Permission

def forwards(apps, schema_editor):
    if not Group.objects.filter(name="CoreUser").exists():
        core_user_group = Group.objects.create(name="CoreUser")
        core_user_group.permissions.add(Permission.objects.get(name="Can add email address"))
        core_user_group.permissions.add(Permission.objects.get(name="Can change email address"))
        core_user_group.permissions.add(Permission.objects.get(name="Can delete email address"))
        core_user_group.permissions.add(Permission.objects.get(name="Can add api log"))
        core_user_group.permissions.add(Permission.objects.get(name="Can change api log"))
        core_user_group.permissions.add(Permission.objects.get(name="Can delete api log"))
        core_user_group.permissions.add(Permission.objects.get(name="Can add button"))
        core_user_group.permissions.add(Permission.objects.get(name="Can change button"))
        core_user_group.permissions.add(Permission.objects.get(name="Can delete button"))
        core_user_group.permissions.add(Permission.objects.get(name="Can add button action"))
        core_user_group.permissions.add(Permission.objects.get(name="Can change button action"))
        core_user_group.permissions.add(Permission.objects.get(name="Can delete button action"))
        core_user_group.permissions.add(Permission.objects.get(name="Can add phone"))
        core_user_group.permissions.add(Permission.objects.get(name="Can change phone"))
        core_user_group.permissions.add(Permission.objects.get(name="Can delete phone"))

    if not Group.objects.filter(name="OrganizationOwner").exists():
        org_owner_group = Group.objects.create(name="OrganizationOwner")
        #org_owner_group.permissions.add(Permission.objects.get(name="Can add organization"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can change organization"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can delete organization"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can add organization owner"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can change organization owner"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can delete organization owner"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can add organization user"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can change organization user"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can delete organization user"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can add user"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can change user"))
        # org_owner_group.permissions.add(Permission.objects.get(name="Can delete user"))

    if not Group.objects.filter(name="RequiresPasswordChange").exists():
        Group.objects.create(name="RequiresPasswordChange")

def reverse(apps, schema_editor):
    Group.objects.get(name="CoreUser").delete()
    Group.objects.get(name="OrganizationOwner").delete()
    Group.objects.get(name="RequiresPasswordChange").delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0014_auto_20170403_1851'),
    ]

    operations = [
        migrations.RunPython(forwards, reverse),
    ]
